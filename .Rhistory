plot.title = element_text(margin = margin(b = 20)))
# Add animation
P1_animated <- P1_animate +
transition_states(Season, transition_length = 2, state_length = 1) +
labs(title = "Total minutes played by player of different age from 2010 to 2022\nSeason: {closest_state}")
# Render the animation
P1_animate<- animate(P1_animated, nframes = 240, fps = 24,renderer = gifski_renderer())
P1_animate
P2 <- Descriptive_Table %>%
plot_ly(x=~SeasonAge,y=~Count,type ="bar",frame=~Season)%>%
layout(title = "Total minutes played by player of different age from 2010 to 2022",
xaxis = list(title = "Player Age", zeroline = F),
yaxis = list(title = "Count", zeroline =F))
P2
P2 <- Descriptive_Table %>%
plot_ly(x=~SeasonAge,y=~Apperance,type ="bar",frame=~Season)%>%
layout(title = "Total minutes played by player of different age from 2010 to 2022",
xaxis = list(title = "Player Age", zeroline = F),
yaxis = list(title = "Count", zeroline =F))
P2
P2_animate <- ggplot(Descriptive_Table, aes(x = SeasonAge, y = Count)) +
geom_bar(stat = "identity", fill='lightblue') +
labs(title = "Total minutes played by player of different age from 2010 to 2022",
x = "Player Age",
y = "Total Minutes Played") +
theme_minimal()+
theme(plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(margin = margin(b = 20)))
# Add animation
P2_animated <- P2_animate +
transition_states(Season, transition_length = 2, state_length = 1) +
labs(title = "Total minutes played by player of different age from 2010 to 2022\nSeason: {closest_state}")
# Render the animation
P2_animate<- animate(P2_animated, nframes = 240, fps = 24,renderer = gifski_renderer())
P2_animate
P2_animate <- ggplot(Descriptive_Table, aes(x = SeasonAge, y = Apperance)) +
geom_bar(stat = "identity", fill='lightblue') +
labs(title = "Total minutes played by player of different age from 2010 to 2022",
x = "Player Age",
y = "Total Minutes Played") +
theme_minimal()+
theme(plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(margin = margin(b = 20)))
# Add animation
P2_animated <- P2_animate +
transition_states(Season, transition_length = 2, state_length = 1) +
labs(title = "Total minutes played by player of different age from 2010 to 2022\nSeason: {closest_state}")
# Render the animation
P2_animate<- animate(P2_animated, nframes = 240, fps = 24,renderer = gifski_renderer())
P2_animate
P3 <- Descriptive_Table %>%
plot_ly(x=~SeasonAge,y=~Total_mins,type ="bar",frame=~Season)%>%
layout(title = "Total minutes played by player of different age from 2010 to 2022",
xaxis = list(title = "Player Age", zeroline = F),
yaxis = list(title = "Count", zeroline =F))
P3
library(tidyverse)
library(readxl)
library(tidymodels)
library(vip)
rm(list=ls())
#Import the data set
data <- read.csv("Vocational.csv")
setwd("C:/Users/meala/OneDrive - UC San Diego/Extra/propensity matching")
library(tidyverse)
library(readxl)
library(tidymodels)
library(vip)
rm(list=ls())
#Import the data set
data <- read.csv("Vocational.csv")
summary(data)
#remove the first column
df<-data
df <- df[-1]
df$placement <- df$placement %>% as.factor()
#Exploratory Analysis
table(df$treatment)
table(df$age)
hist(df$score)
table(df$experience)
hist(df$previous_exp)
hist(df$distance_majorcity)
set.seed(2059)
#Part 1, Randomized Control Trial (RCT)
rct <- data
place_treat <- rct$placement[rct$treatment==1]
place_control <- rct$placement[rct$treatment==0]
t.test(place_treat,place_control,alternative = 'greater')
#t.test(rct$placement~rct$treatment, alternative = 'greater')
rct$treatment <- factor(rct$treatment, levels = c(0, 1), labels = c("Control", "Treatment"))
rct$placement <- factor(rct$placement, levels = c(0, 1), labels = c("Not Placed", "Placed"))
table(rct$treatment,rct$placement)
prop.table(table(rct$treatment,rct$placement))
#################################################################
#Part 2 : Logistic Model
rm(list=setdiff(ls(),c("df","data")))
#Split the data into training and testing
set.seed(2059)
split <- initial_split(df, prop = 0.75, strata = placement)
train <- training(split)
test <- testing(split)
rm(split)
#Making a Logistic Model using base glm function
train[,c(2,3,6,7)] <- scale(train[,c(2,3,6,7)])
lr <- glm(data = train,placement ~.-experience, family = binomial)
summary(lr)
vip(lr)
pred <- predict(lr, newdata=test, type = "response")
confusionMatrix <- table(pred,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
View(train)
#Split the data into training and testing
set.seed(2059)
split <- initial_split(df, prop = 0.75, strata = placement)
train <- training(split)
test <- testing(split)
rm(split)
lr <- glm(data = train,placement ~., family = binomial)
summary(lr)
vip(lr)
pred <- predict(lr, newdata=test, type = "response")
confusionMatrix <- table(pred,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix
hist(pred)
scale(train[,c(2,3,6,7)])
try <- scale(train[,c(2,3,6,7)])
View(try)
train[,c(2,3,6,7)] <- scale(train[,c(2,3,6,7)])
train$age
try$age
#Split the data into training and testing
set.seed(2059)
split <- initial_split(df, prop = 0.75, strata = placement)
train <- training(split)
test <- testing(split)
rm(split)
train[,c('age', 'score', 'previous_exp', 'distance_majorcity')] <- scale(train[,c('age', 'score', 'previous_exp', 'distance_majorcity')])
lr <- glm(data = train,placement ~., family = binomial)
summary(lr)
vip(lr)
pred <- predict(lr, newdata=test, type = "response")
hist(pred)
# Check the summary statistics of the scaled data
summary(train[, c('age', 'score', 'previous_exp', 'distance_majorcity')])
#Split the data into training and testing
set.seed(2059)
split <- initial_split(df, prop = 0.75, strata = placement)
train <- training(split)
test <- testing(split)
rm(split)
lr <- glm(data = train,placement ~., family = binomial)
summary(lr)
vip(lr)
pred <- predict(lr, newdata=test, type = "response")
confusionMatrix <- table(pred,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
table(pred,test$placement)
?predict
ROCRpred <- prediction(lr_predictions,test$hd)
library(cowplot)
library(ROCR)
install.packages("ROCR")
library(ROCR)
ROCRpred <- prediction(lr_predictions,test$hd)
pred <- predict(lr, newdata=test, type = "response")
ROCRpred <- prediction(pred,test$hd)
ROCRpred <- prediction(pred,test$placement)
ROCRperf <- performance(ROCRpred, "tpr",'fpr')
plot(ROCRperf,colorize=T,print.cutoffs.at=seq(0,1,0.1), text.adj=c(-0.5,2))
confusionMatrix <- table(pred >0.5,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix <- table(pred >0.6,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix <- table(pred >0.8,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix <- table(pred >0.4,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix <- table(pred >0.5,test$placement)
View(df)
confusionMatrix <- table(pred >0.2,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix <- table(pred >0.1,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix <- table(pred >0.3,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
confusionMatrix <- table(pred >0.4,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
test$placement
table(test$placement)
1875/75000
rm(ROCRperf,ROCRpred,confusionMatrix,pred,test,train)
###########################################################3
# Two Model  Approach
treatment <- df %>%
filter(treatment == 1)
View(treatment)
control <- df %>%
filter(treatment==0)
View(control)
df$pred_treat <- predict(lr_treat, newdata = df, type = "response")
lr_treat <- glm(data = treatment,placement ~.-treatment, family = binomial)
lr_treat <- glm(data = treatment,placement ~.-treatment, family = binomial)
df$pred_treat <- predict(lr_treat, newdata = df, type = "response")
View(df)
lr_treat <- glm(data = treatment,placement ~.-treatment, family = binomial)
df$pred_control <- predict(lr_control, newdata = df, type = "response")
lr_treat <- glm(data = treatment,placement ~.-treatment, family = binomial)
lr_control <- glm(data = treatment,placement ~.-treatment, family = binomial)
df$pred_treat <- predict(lr_treat, newdata = df, type = "response")
df$pred_control <- predict(lr_control, newdata = df, type = "response")
View(df)
df$diff <- df$pred_treat-df$pred_control
###########################################################3
# Two Model  Approach
treatment <- df %>%
filter(treatment == 1)
control <- df %>%
filter(treatment==0)
lr_treat <- glm(data = treatment,placement ~.-treatment, family = binomial)
lr_control <- glm(data = control,placement ~.-treatment, family = binomial)
df$pred_treat <- predict(lr_treat, newdata = df, type = "response")
df$pred_control <- predict(lr_control, newdata = df, type = "response")
df$diff <- df$pred_treat- df$pred_control
###########################################################3
# Two Model  Approach
treatment <- df %>%
filter(treatment == 1)
control <- df %>%
filter(treatment==0)
lr_treat <- glm(data = treatment,placement ~.-treatment, family = binomial)
lr_control <- glm(data = control,placement ~.-treatment, family = binomial)
df$pred_treat <- round(predict(lr_treat, newdata = df, type = "response"),2)
df$pred_control <- round(predict(lr_control, newdata = df, type = "response"),2)
df$pred_treat <- round(predict(lr_treat, newdata = df, type = "response"),2)
df$pred_control <- round(predict(lr_control, newdata = df, type = "response"),2)
df$diff <- df$pred_treat- df$pred_control
df$pred_treat <- round(predict(lr_treat, newdata = df, type = "response"),3)
df$pred_control <- round(predict(lr_control, newdata = df, type = "response"),3)
df$diff <- df$pred_treat- df$pred_control
df$pred_treat <- round(predict(lr_treat, newdata = df, type = "response"),4)
df$pred_control <- round(predict(lr_control, newdata = df, type = "response"),4)
df$diff <- df$pred_treat- df$pred_control
df$pred_treat <- round(predict(lr_treat, newdata = df, type = "response"),5)
df$pred_control <- round(predict(lr_control, newdata = df, type = "response"),5)
df$diff <- df$pred_treat- df$pred_control
View(df)
library(tidyverse)
library(readxl)
library(tidymodels)
library(vip)
library(cowplot)
library(ROCR)
rm(list=ls())
#Import the data set
data <- read.csv("Vocational.csv")
summary(data)
#remove the first column
df<-data
df <- df[-1]
df$placement <- df$placement %>% as.factor()
#Exploratory Analysis
table(df$treatment)
table(df$age)
hist(df$score)
table(df$experience)
hist(df$previous_exp)
hist(df$distance_majorcity)
set.seed(2059)
#Part 1, Randomized Control Trial (RCT)
rct <- data
place_treat <- rct$placement[rct$treatment==1]
place_control <- rct$placement[rct$treatment==0]
t.test(place_treat,place_control,alternative = 'greater')
#t.test(rct$placement~rct$treatment, alternative = 'greater')
rct$treatment <- factor(rct$treatment, levels = c(0, 1), labels = c("Control", "Treatment"))
rct$placement <- factor(rct$placement, levels = c(0, 1), labels = c("Not Placed", "Placed"))
table(rct$treatment,rct$placement)
prop.table(table(rct$treatment,rct$placement))
#################################################################
#Part 2 : Logistic Model
rm(list=setdiff(ls(),c("df","data")))
#Split the data into training and testing
set.seed(2059)
split <- initial_split(df, prop = 0.75, strata = placement)
train <- training(split)
test <- testing(split)
rm(split)
#Making a Logistic Model using base glm function
lr <- glm(data = train,placement ~., family = binomial)
summary(lr)
vip(lr)
pred <- predict(lr, newdata=test, type = "response")
ROCRpred <- prediction(pred,test$placement)
ROCRperf <- performance(ROCRpred, "tpr",'fpr')
plot(ROCRperf,colorize=T,print.cutoffs.at=seq(0,1,0.1), text.adj=c(-0.5,2))
confusionMatrix <- table(pred >0.4,test$placement)
sum(diag(confusionMatrix)) / sum(confusionMatrix)
rm(ROCRperf,ROCRpred,confusionMatrix,pred,test,train)
###########################################################3
# Two Model  Approach
treatment <- df %>%
filter(treatment == 1)
control <- df %>%
filter(treatment==0)
lr_treat <- glm(data = treatment,placement ~.-treatment, family = binomial)
lr_control <- glm(data = control,placement ~.-treatment, family = binomial)
df$pred_treat <- round(predict(lr_treat, newdata = df, type = "response"),5)
df$pred_control <- round(predict(lr_control, newdata = df, type = "response"),5)
df$diff <- df$pred_treat- df$pred_control
df <- df %>%
mutate(decile = 11- ntile(diff,10))
#get the mean probability
uplift <- df %>%
group_by(decile) %>%
summarise(
treatment_n = sum(treatment),
treatment_placement = sum(as.integer(as.character(placement)) * treatment),  # Only for treated
control_n = sum(1 - treatment),
control_placement = sum(as.integer(as.character(placement)) * (1 - treatment))  # Only for control
)
View(uplift)
######################################################
# making the uplift
uplift <- df %>%
group_by(decile) %>%
summarise(
treatment_n = sum(treatment),
treatment_placement = sum(as.integer(as.character(placement)) * treatment),  # Only for treated
control_n = sum(1 - treatment),
control_placement = sum(as.integer(as.character(placement)) * (1 - treatment))  # Only for control
)
uplift_cummulative <-uplift
uplift_cummulative $cum_treatmentnumber <- cumsum(uplift_cummulative$treatment_n)
uplift_cummulative$cum_treatmentplacement <- cumsum(uplift_cummulative$treatment_placement)
uplift_cummulative$cum_controlplacement <- cumsum(uplift_cummulative$control_placement)
uplift_cummulative$cum_controlnumber <- cumsum(uplift_cummulative$control_n)
uplift_cummulative <- uplift_cummulative%>%
select(decile, cum_treatmentnumber, cum_treatmentplacement, cum_controlplacement, cum_controlnumber)
uplift_cummulative$incremental <- uplift_cummulative$cum_treatmentplacement - (uplift_cummulative$cum_controlplacement/uplift_cummulative$cum_controlnumber) * uplift_cummulative$cum_treatmentnumber
uplift_cummulative$incrementUplift <- round(uplift_cummulative$incremental / sum(uplift_cummulative$cum_controlnumber)*100,2)
ggplot() +
geom_line(uplift_cummulative, mapping=aes(x=decile, y=incrementUplift), color='blue') +
geom_point(uplift_cummulative, mapping=aes(x=decile, y=incrementUplift), color='darkblue') +
geom_line(uplift_cummulative, mapping=aes(x=decile, y=incrementUplift), color='blue') +
geom_line(aes(x=c(1, 10), y = c(first(uplift_cummulative$incrementUplift), last(uplift_cummulative$incrementUplift))),
linetype="dashed", color='green') +
labs(title = "Incremental Uplift by Decile",
x = "Decile",
y = "Incremental Uplift",
caption = "") +
theme_minimal()
#### Average Effect on decile #########
uplift$incremental <- (uplift$treatment_placement/ uplift$treatment_n - uplift$control_placement/uplift$control_n) *100
ggplot(uplift, aes(x=as.factor(decile),y=incremental)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label=round(incremental,1)), vjust=-0.5,color='black')+
labs(title = "Average Uplift by Decile",
x = "Decile",
y = "Average Uplift",
caption = "Uplift in Decile") +
theme_minimal()
View(uplift_cummulative)
a_plot <- ggplot() +
geom_line(uplift_cummulative, mapping=aes(x=decile, y=incrementUplift), color='blue') +
geom_point(uplift_cummulative, mapping=aes(x=decile, y=incrementUplift), color='darkblue') +
geom_line(uplift_cummulative, mapping=aes(x=decile, y=incrementUplift), color='blue') +
geom_line(aes(x=c(1, 10), y = c(first(uplift_cummulative$incrementUplift), last(uplift_cummulative$incrementUplift))),
linetype="dashed", color='green') +
labs(title = "Incremental Uplift by Decile",
x = "Decile",
y = "Incremental Uplift",
caption = "") +
theme_minimal()
#### Average Effect on decile #########
uplift$incremental <- (uplift$treatment_placement/ uplift$treatment_n - uplift$control_placement/uplift$control_n) *100
b_plot <- ggplot(uplift, aes(x=as.factor(decile),y=incremental)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label=round(incremental,1)), vjust=-0.5,color='black')+
labs(title = "Average Uplift by Decile",
x = "Decile",
y = "Average Uplift",
caption = "Uplift in Decile") +
theme_minimal()
grid.arrange(a_plot, b_plot, ncol=2)
par(mfrow = c(1, 2))
# Plot first plot
plot(a)
par(mfrow = c(1, 2))
# Plot first plot
plot(a_plot)
# Plot second plot
plot(b_plot)
# Reset plotting parameters to default (optional)
par(mfrow = c(1, 1))
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(a_plot, b_plot, ncol=2)
b_plot <- ggplot(uplift, aes(x=as.factor(decile),y=incremental)) +
geom_bar(stat = "identity", fill = "brown") +
geom_text(aes(label=round(incremental,1)), vjust=-0.5,color='black')+
labs(title = "Average Uplift by Decile",
x = "Decile",
y = "Average Uplift",
caption = "Uplift in Decile") +
theme_minimal()
grid.arrange(a_plot, b_plot, ncol=2)
b_plot <- ggplot(uplift, aes(x=as.factor(decile),y=incremental)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label=round(incremental,1)), vjust=-0.5,color='black')+
labs(title = "Average Uplift by Decile",
x = "Decile",
y = "Average Uplift",
caption = "Uplift in Decile") +
theme_minimal()
grid.arrange(a_plot, b_plot, ncol=2)
b_plot <- ggplot(uplift, aes(x=as.factor(decile),y=incremental)) +
geom_bar(stat = "identity", fill = "lightred") +
geom_text(aes(label=round(incremental,1)), vjust=-0.5,color='black')+
labs(title = "Average Uplift by Decile",
x = "Decile",
y = "Average Uplift",
caption = "Uplift in Decile") +
theme_minimal()
grid.arrange(a_plot, b_plot, ncol=2)
b_plot <- ggplot(uplift, aes(x=as.factor(decile),y=incremental)) +
geom_bar(stat = "identity", fill = "lightyellow") +
geom_text(aes(label=round(incremental,1)), vjust=-0.5,color='black')+
labs(title = "Average Uplift by Decile",
x = "Decile",
y = "Average Uplift",
caption = "Uplift in Decile") +
theme_minimal()
grid.arrange(a_plot, b_plot, ncol=2)
b_plot <- ggplot(uplift, aes(x=as.factor(decile),y=incremental)) +
geom_bar(stat = "identity", fill = "orange") +
geom_text(aes(label=round(incremental,1)), vjust=-0.5,color='black')+
labs(title = "Average Uplift by Decile",
x = "Decile",
y = "Average Uplift",
caption = "Uplift in Decile") +
theme_minimal()
grid.arrange(a_plot, b_plot, ncol=2)
View(uplift)
a_plot
b_plot
mean(place_treat)
t.test(place_treat,place_control,alternative = 'greater')
#Part 1, Randomized Control Trial (RCT)
rct <- data
place_treat <- rct$placement[rct$treatment==1]
place_control <- rct$placement[rct$treatment==0]
t.test(place_treat,place_control,alternative = 'greater')
mean(place_treat)
mean(place_control)
sd(place_treat)
sd(place_control)
rct$treatment <- factor(rct$treatment, levels = c(0, 1), labels = c("Control", "Treatment"))
rct$placement <- factor(rct$placement, levels = c(0, 1), labels = c("Not Placed", "Placed"))
table(rct$treatment,rct$placement)
prop.table(table(rct$treatment,rct$placement))
lr <- glm(data = train,placement ~., family = binomial)
summary(lr)
vip(lr)
pred <- predict(lr, newdata=test, type = "response")
library(tidyverse)
library(readxl)
library(tidymodels)
library(vip)
library(cowplot)
library(ROCR)
library(gridExtra)
rm(list=ls())
#Import the data set
data <- read.csv("Vocational.csv")
summary(data)
#remove the first column
df<-data
df <- df[-1]
df$placement <- df$placement %>% as.factor()
#Exploratory Analysis
table(df$treatment)
table(df$age)
hist(df$score)
table(df$experience)
hist(df$previous_exp)
hist(df$distance_majorcity)
set.seed(2059)
#Part 1, Randomized Control Trial (RCT)
rct <- data
place_treat <- rct$placement[rct$treatment==1]
place_control <- rct$placement[rct$treatment==0]
t.test(place_treat,place_control,alternative = 'greater')
#t.test(rct$placement~rct$treatment, alternative = 'greater')
rct$treatment <- factor(rct$treatment, levels = c(0, 1), labels = c("Control", "Treatment"))
rct$placement <- factor(rct$placement, levels = c(0, 1), labels = c("Not Placed", "Placed"))
table(rct$treatment,rct$placement)
prop.table(table(rct$treatment,rct$placement))
#################################################################
#Part 2 : Logistic Model
rm(list=setdiff(ls(),c("df","data")))
#Split the data into training and testing
set.seed(2059)
split <- initial_split(df, prop = 0.75, strata = placement)
train <- training(split)
test <- testing(split)
rm(split)
#Making a Logistic Model using base glm function
lr <- glm(data = train,placement ~., family = binomial)
summary(lr)
